'''
union/find:
time: O(n^2 + 2n + n) = O(n^2)
'''
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        parents = [i for i in range(n)]
        ranks = [1] * n
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j]:
                    self.union(parents, ranks, i, j)
                    
        connectedCount = Counter(self.find(parents, i) for i in range(n)) # {root: count}
        initailCount = Counter(self.find(parents, i) for i in initial)
        return min(initial, key=lambda i: ((initailCount[self.find(parents, i)] == 1) * -connectedCount[self.find(parents, i)], i))
        
    def find(self, parents, u):
        if parents[u] != u:
            parents[u] = self.find(parents, parents[u])
        return parents[u]
    
    def union(self, parents, ranks, u, v):
        ru, rv = self.find(parents, u), self.find(parents, v)
        if ru == rv:
            return False
        if ranks[ru] < ranks[rv]:
            parents[ru] = rv
        elif ranks[ru] > ranks[rv]:
            parents[rv] = ru
        else:
            parents[ru] = rv
            ranks[rv] += 1
        return True

'''

'''